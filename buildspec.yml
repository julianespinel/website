version: 0.2

env:
  variables:
     IMAGE_VERSION: "1.0.19"
     ECR_REPOSITORY_URI: "476954489154.dkr.ecr.us-east-1.amazonaws.com/website"
     AWS_DEFAULT_REGION: "us-east-1"

phases:
  install:
    #If you use the Ubuntu standard image 2.0 or later, you must specify runtime-versions.
    #If you specify runtime-versions and use an image other than Ubuntu standard image 2.0, the build fails.
    runtime-versions:
      docker: 19
    commands:
      # Create a postgres database for tests.
      - docker run -d --rm -p 5432:5432 -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=example -e POSTGRES_DB=websitedb postgres:alpine
      - pip install -r requirements.txt
  pre_build:
    commands:
      - python manage.py test --settings=settings.test
      - echo Logging in to Amazon ECR...
      - aws --version
      - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $ECR_REPOSITORY_URI:$IMAGE_VERSION .
      - docker tag $ECR_REPOSITORY_URI:$IMAGE_VERSION $ECR_REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $ECR_REPOSITORY_URI:$IMAGE_VERSION
      - docker push $ECR_REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      - printf '[{"name":"website-container","imageUri":"%s"}]' $ECR_REPOSITORY_URI:$IMAGE_VERSION > imagedefinitions.json
artifacts:
  files:
    - imagedefinitions.json
